import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useNavigate, useLocation } from 'react-router-dom';
import { toast } from 'react-toastify';
import { FaBox, FaShoppingCart } from 'react-icons/fa';
import type { Orchid, CreateOrderRequest, CreateOrderDetailRequest } from '../types/orchid';
import { formatPrice } from '../utils/formatters';
import { cartAPI, orderAPI } from '../utils/api';
import '../styles/Order.css';

interface OrderItem {
  orchid: Orchid;
  quantity: number;
}

interface LocationState {
  items: OrderItem[];
  fromCart?: boolean;
}

const Order: React.FC = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const { items, fromCart } = (location.state as LocationState) || { items: [], fromCart: false };
  const [currentStep, setCurrentStep] = useState(1);
  const [selectedPayment, setSelectedPayment] = useState('');
  const [orderItems, setOrderItems] = useState<OrderItem[]>(items);
  const [loading, setLoading] = useState(false);

  const [formData, setFormData] = useState({
    fullName: '',
    email: '',
    phone: '',
    address: '',
    city: '',
    note: ''
  });

  // Load cart data if coming from cart
  useEffect(() => {
    const loadCartData = async () => {
      if (fromCart) {
        try {
          const cart = await cartAPI.getCart();
          // Convert cart items to order items
          const convertedItems: OrderItem[] = cart.items.map(item => ({
            orchid: item.orchid,
            quantity: item.quantity
          }));
          setOrderItems(convertedItems);
        } catch (error) {
          console.error('Error loading cart:', error);
          toast.error('Failed to load cart data');
        }
      }
    };

    loadCartData();
  }, [fromCart]);

  const steps = [
    { number: 1, label: 'Information', icon: <FaUser /> },
    { number: 2, label: 'Shipping', icon: <FaTruck /> },
    { number: 3, label: 'Payment', icon: <FaCreditCard /> },
    { number: 4, label: 'Review', icon: <FaBox /> }
  ];

  const paymentMethods = [
    { id: 'visa', name: 'Visa', image: visaImg },
    { id: 'mastercard', name: 'Mastercard', image: mastercardImg },
    { id: 'momo', name: 'Momo', image: momoImg },
    { id: 'zalopay', name: 'ZaloPay', image: zalopayImg }
  ];

  // Debug log to check current form state
  console.log('Current form data:', formData);
  console.log('Current step:', currentStep);
  console.log('Selected payment:', selectedPayment);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    console.log(`Form field changed: ${name} = ${value}`); // Debug log
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const subtotal = orderItems.reduce((sum, item) => sum + item.orchid.price * item.quantity, 0);
  const shipping = 50000; // Fixed shipping cost
  const total = subtotal + shipping;

  const handleNextStep = () => {
    if (currentStep < 4) {
      setCurrentStep(prev => prev + 1);
    }
  };

  const handlePrevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(prev => prev - 1);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validate required fields based on current step
    if (currentStep === 1) {
      if (!formData.fullName || !formData.email || !formData.phone) {
        toast.error('Please fill in all required fields');
        return;
      }
    } else if (currentStep === 2) {
      if (!formData.address || !formData.city) {
        toast.error('Please fill in all shipping information');
        return;
      }
    } else if (currentStep === 3) {
      if (!selectedPayment) {
        toast.error('Please select a payment method');
        return;
      }
    }
    
    if (currentStep === 4) {
      // Final order submission
      try {
        setLoading(true);
        
        // Get user info
        const user = JSON.parse(localStorage.getItem('user') ?? '{}');
        if (!user.accountId) {
          toast.error('Please log in to place an order');
          navigate('/login');
          return;
        }

        // Prepare order details
        const orderDetails: CreateOrderDetailRequest[] = orderItems.map(item => ({
          orchidId: item.orchid.orchidId,
          quantity: item.quantity,
          price: item.orchid.price
        }));

        // Create order request
        const orderRequest: CreateOrderRequest = {
          accountId: user.accountId, // Use string directly instead of parsing to int
          orderDate: new Date().toISOString().split('T')[0], // YYYY-MM-DD format
          totalAmount: total,
          orderStatus: 'pending',
          orderDetails
        };

        // Create the order
        await orderAPI.createOrder(orderRequest);
        
        // Clear cart if order came from cart
        if (fromCart) {
          await cartAPI.clearCart();
        }
        
        toast.success('Order placed successfully!');
        
        // Redirect to orders page
        setTimeout(() => {
          navigate('/my-orders');
        }, 2000);
      } catch (error) {
        console.error('Order submission error:', error);
        toast.error('Failed to place order. Please try again.');
      } finally {
        setLoading(false);
      }
    } else {
      handleNextStep();
    }
  };

  return (
    <div className="order-container">
      <motion.div 
        className="order-content"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <div className="order-steps">
          <div className="step-indicator">
            {steps.map((step) => (
              <motion.div
                key={step.number}
                className={`step ${currentStep === step.number ? 'active' : ''} ${currentStep > step.number ? 'completed' : ''}`}
                whileHover={{ scale: 1.1 }}
              >
                <div className="step-number">
                  {currentStep > step.number ? 'âœ“' : step.number}
                </div>
                <div className="step-label">{step.label}</div>
              </motion.div>
            ))}
          </div>

          <AnimatePresence mode="wait">
            <motion.div
              key={currentStep}
              initial={{ opacity: 0, x: 20 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -20 }}
              transition={{ duration: 0.3 }}
            >
              {currentStep === 1 && (
                <div className="form-section">
                  <h3 className="form-title">
                    <FaUser /> Personal Information
                  </h3>
                  <div className="form-group">
                    <label htmlFor="fullName" className="form-label">Full Name *</label>
                    <input
                      type="text"
                      id="fullName"
                      name="fullName"
                      className="form-input"
                      value={formData.fullName}
                      onChange={handleInputChange}
                      placeholder="Enter your full name"
                      required
                    />
                  </div>
                  <div className="form-group">
                    <label htmlFor="email" className="form-label">Email *</label>
                    <input
                      type="email"
                      id="email"
                      name="email"
                      className="form-input"
                      value={formData.email}
                      onChange={handleInputChange}
                      placeholder="Enter your email"
                      required
                    />
                  </div>
                  <div className="form-group">
                    <label htmlFor="phone" className="form-label">Phone *</label>
                    <input
                      type="tel"
                      id="phone"
                      name="phone"
                      className="form-input"
                      value={formData.phone}
                      onChange={handleInputChange}
                      placeholder="Enter your phone number"
                      required
                    />
                  </div>
                </div>
              )}

              {currentStep === 2 && (
                <div className="form-section">
                  <h3 className="form-title">
                    <FaTruck /> Shipping Information
                  </h3>
                  <div className="form-group">
                    <label htmlFor="address" className="form-label">Address *</label>
                    <input
                      type="text"
                      id="address"
                      name="address"
                      className="form-input"
                      value={formData.address}
                      onChange={handleInputChange}
                      placeholder="Enter your address"
                      required
                    />
                  </div>
                  <div className="form-group">
                    <label htmlFor="city" className="form-label">City *</label>
                    <input
                      type="text"
                      id="city"
                      name="city"
                      className="form-input"
                      value={formData.city}
                      onChange={handleInputChange}
                      placeholder="Enter your city"
                      required
                    />
                  </div>
                  <div className="form-group">
                    <label htmlFor="note" className="form-label">Note (Optional)</label>
                    <textarea
                      id="note"
                      name="note"
                      className="form-input"
                      value={formData.note}
                      onChange={handleInputChange}
                      placeholder="Add any special instructions"
                      rows={4}
                    />
                  </div>
                </div>
              )}

              {currentStep === 3 && (
                <div className="form-section">
                  <h3 className="form-title">
                    <FaCreditCard /> Payment Method
                  </h3>
                  <div className="payment-methods">
                    {paymentMethods.map((method) => (
                      <motion.div
                        key={method.id}
                        className={`payment-method ${selectedPayment === method.id ? 'selected' : ''}`}
                        onClick={() => {
                          setSelectedPayment(method.id);
                          console.log('Selected payment method:', method.id); // Debug log
                        }}
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                      >
                        <img 
                          src={method.image} 
                          alt={method.name}
                          onError={(e) => {
                            console.error(`Failed to load image for ${method.name}:`, e);
                            // Fallback to text if image fails
                            (e.target as HTMLImageElement).style.display = 'none';
                          }}
                        />
                        <span>{method.name}</span>
                        {selectedPayment === method.id && (
                          <div style={{ 
                            color: '#9b4dff', 
                            fontSize: '0.8rem', 
                            fontWeight: 'bold' 
                          }}>
                            âœ“ Selected
                          </div>
                        )}
                      </motion.div>
                    ))}
                  </div>
                  {!selectedPayment && (
                    <p style={{ color: '#95a5a6', marginTop: '1rem', fontSize: '0.9rem' }}>
                      Please select a payment method to continue
                    </p>
                  )}
                </div>
              )}

              {currentStep === 4 && (
                <div className="form-section">
                  <h3 className="form-title">
                    <FaBox /> Order Review
                  </h3>
                  <div className="review-details">
                    <div className="review-section">
                      <h4>Personal Information</h4>
                      <p><strong>Name:</strong> {formData.fullName}</p>
                      <p><strong>Email:</strong> {formData.email}</p>
                      <p><strong>Phone:</strong> {formData.phone}</p>
                    </div>
                    
                    <div className="review-section">
                      <h4>Shipping Information</h4>
                      <p><strong>Address:</strong> {formData.address}</p>
                      <p><strong>City:</strong> {formData.city}</p>
                      {formData.note && <p><strong>Note:</strong> {formData.note}</p>}
                    </div>
                    
                    <div className="review-section">
                      <h4>Payment Method</h4>
                      <p><strong>Selected:</strong> {paymentMethods.find(p => p.id === selectedPayment)?.name}</p>
                    </div>
                    
                    <div className="review-section">
                      <h4>Order Items</h4>
                      {orderItems.map((item) => (
                        <div key={item.orchid.orchidId} className="review-item">
                          <span>{item.orchid.orchidName} x {item.quantity}</span>
                          <span>{formatPrice(item.orchid.price * item.quantity)} VND</span>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              )}

              <div style={{ display: 'flex', gap: '1rem', marginTop: '2rem' }}>
                {currentStep > 1 && (
                  <motion.button
                    className="checkout-button"
                    onClick={handlePrevStep}
                    disabled={loading}
                    whileHover={{ scale: loading ? 1 : 1.02 }}
                    whileTap={{ scale: loading ? 1 : 0.98 }}
                    style={{ flex: 1 }}
                  >
                    Previous
                  </motion.button>
                )}
                <motion.button
                  className="checkout-button"
                  onClick={currentStep === 4 ? handleSubmit : handleNextStep}
                  disabled={loading}
                  whileHover={{ scale: loading ? 1 : 1.02 }}
                  whileTap={{ scale: loading ? 1 : 0.98 }}
                  style={{ flex: 1 }}
                >
                  {(() => {
                    if (loading) return 'Processing...';
                    if (currentStep === 4) return 'Place Order';
                    return 'Next';
                  })()}
                </motion.button>
              </div>
            </motion.div>
          </AnimatePresence>
        </div>

        <div className="order-summary">
          <h3 className="summary-title">Order Summary</h3>
          <div className="summary-items">
            {orderItems.map((item) => (
              <motion.div
                key={item.orchid.orchidId}
                className="summary-item"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
              >
                <div className="item-details">
                  <img src={item.orchid.orchidUrl} alt={item.orchid.orchidName} className="item-image" />
                  <div className="item-info">
                    <h4>{item.orchid.orchidName}</h4>
                    <p>Quantity: {item.quantity}</p>
                  </div>
                </div>
                <div className="item-price">
                  {formatPrice(item.orchid.price * item.quantity)} VND
                </div>
              </motion.div>
            ))}
          </div>
          <div className="summary-total">
            <div className="total-row">
              <span>Subtotal</span>
              <span>{formatPrice(subtotal)} VND</span>
            </div>
            <div className="total-row">
              <span>Shipping</span>
              <span>{formatPrice(shipping)} VND</span>
            </div>
            <div className="total-row final">
              <span>Total</span>
              <span>{formatPrice(total)} VND</span>
            </div>
          </div>
        </div>
      </motion.div>
    </div>
  );
};

export default Order;
